Index: linux-5.3.2/drivers/video/fbdev/simplefb.c
===================================================================
--- linux-5.3.2.orig/drivers/video/fbdev/simplefb.c
+++ linux-5.3.2/drivers/video/fbdev/simplefb.c
@@ -22,6 +22,7 @@
 #include <linux/of.h>
 #include <linux/of_clk.h>
 #include <linux/of_platform.h>
+#include <linux/of_address.h>
 #include <linux/parser.h>
 #include <linux/regulator/consumer.h>
 
@@ -402,6 +403,10 @@ static void simplefb_regulators_destroy(
 static int simplefb_probe(struct platform_device *pdev)
 {
 	int ret;
+
+	struct device_node * memnode;
+	struct resource memres;
+
 	struct simplefb_params params;
 	struct fb_info *info;
 	struct simplefb_par *par;
@@ -418,12 +423,26 @@ static int simplefb_probe(struct platfor
 
 	if (ret)
 		return ret;
-
+#if 0
 	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!mem) {
 		dev_err(&pdev->dev, "No memory resource\n");
 		return -EINVAL;
 	}
+#else
+	memnode = of_parse_phandle(pdev->dev.of_node, "memory-region", 0);
+	if (!memnode) {
+		dev_err(&pdev->dev, "No memory region\n");
+		return -ENODEV;
+	}
+	ret = of_address_to_resource(memnode, 0, &memres);
+	if (ret) {
+		dev_err(&pdev->dev, "of_address_to_resource fail: %d\n", ret);
+		return -ENODEV;
+	}
+	mem = &memres;
+	dev_info(&pdev->dev, "simplefb: start %#x end %#x\n", mem->start, mem->end);
+#endif
 
 	info = framebuffer_alloc(sizeof(struct simplefb_par), &pdev->dev);
 	if (!info)
@@ -472,7 +491,7 @@ static int simplefb_probe(struct platfor
 
 	ret = simplefb_regulators_get(par, pdev);
 	if (ret < 0)
-		goto error_clocks;
+		dev_warn(&pdev->dev, "simplefb get regulator failed as %d\n", ret);
 
 	simplefb_clocks_enable(par, pdev);
 	simplefb_regulators_enable(par, pdev);
